*********Program 52.c ******************************
//linked list - insert, delete, reverse...
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct rec {
 int rno;
 char s[25];
 struct rec *next;
};
typedef struct rec stud_rec;

stud_rec* insert(stud_rec*, int, char*);
void print(stud_rec*);
stud_rec* delete(stud_rec*, char*);
stud_rec* reverse(stud_rec *head);

int main() {
 stud_rec *student;
 student = NULL;
 
 student = insert(student, 12, "raju");
 student = insert(student, 12, "rani");
 student = insert(student, 13, "padma");
 student = insert(student, 14, "hetu");
 student = insert(student, 15, "ravi");
 print(student);

 printf("reversing the list\n");
 student = reverse(student);
 print(student);
 
 student = delete(student, "padma");
 printf("printing list after deleting padma\n");
 print(student);

 student = delete(student, "raju");
 printf("printing list after deleting raju\n");
 print(student);

 student = delete(student, "raki");
 printf("printing list after deleting raki\n");
 print(student);

 /*
 student = delete(student, "ravi");
 printf("printing list after deleting ravi\n");
 print(student);

 student = delete(student, "hetu");
 printf("printing list after deleting hetu\n");
 print(student);

 
 student = delete(student, "rani");
 printf("printing list after deleting rani\n");
 print(student);
 */
 
}

stud_rec* insert(stud_rec *head, int rno, char *s) {
  stud_rec *last, *temp, *old;

  old = head;
  temp = (stud_rec*) malloc(sizeof(stud_rec));
  temp->rno = rno;
  strcpy(temp->s, s);
  temp->next = NULL;

  if (head == NULL) {  
    return temp;
  }else {
    while(head->next != NULL) {
      head = head->next;
    }
    head->next = temp;
  }
  return old;
}

void print(stud_rec *head) {
  while (head != NULL) {
    //printf("Roll no: %d Name: %s\n", head->rno, head->s);
    printf("%d %s ", head->rno, head->s);
    head = head->next;
  }
  printf("\n");
  return;
}

stud_rec* delete(stud_rec *head, char *s) {

 stud_rec *prev, *cur;
 cur = head;
 prev = cur;

 while (cur != NULL ) {
    if (0 == strcmp(cur->s, s)) {
      prev->next = cur->next;

      if (cur == head) { //firt node being deleted.
        head = head->next;
      }

      cur->next = NULL;
      free(cur);
      return head;
    }
    prev = cur;
    cur = cur->next;
 }
 //reached end of list -- cann't find s
 printf("%s cann't be deleted\n", s);
 return head;
}

stud_rec* reverse(stud_rec *head) {
 stud_rec *s, *r, *q;
 q = head;
 s = NULL;
 r = NULL;

 while (q != NULL) {
   s = r;
   r = q;
   q = q->next;
   r->next = s;
 }
 return r;
}
*********Program 53.c ******************************
//check loops..
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct rec {
 int rno;
 char s[25];
 struct rec *next;
};
typedef struct rec stud_rec;

stud_rec* insert(stud_rec*, int, char*);
void checkloop(stud_rec *q);
void print(stud_rec *head);

int main() {
 stud_rec *student;
 student = NULL;

 student = insert(student, 12, "raju");
 student = insert(student, 12, "rani");
 student = insert(student, 13, "padma");
 student = insert(student, 14, "hetu");
 student = insert(student, 15, "ravi");
 student = insert(student, 16, "roja");
 student = insert(student, 17, "roopa");
 student = insert(student, 18, "kripa");

 //printing the list.
 print(student);

 //checking the existence of a loop...
 checkloop(student);

 //now create a loop;
 stud_rec *d;
 d = student;
 while(d->next != NULL) {
   d = d->next;
 }
 d->next = student; //create a loop between last and first node.

 //checking the existence of a loop...
 checkloop(student);

}

void checkloop(stud_rec *q) {
  stud_rec *slow, *fast;
  int c = 0;
  slow = q;
  fast = q->next;
  while (slow != NULL && fast != NULL) {
    printf("%d it: slow pointer is at %s - fast is at %s\n", c, slow->s, fast->s); 
    if (slow == fast) {
      printf("loop exists \n");
      printf("both pointers met at %d node - %d %s\n", c, fast->rno, fast->s);
      return;
    }
    slow = slow->next;
    fast = (fast->next)?(fast->next->next):fast->next;
    c++;
  }
  printf("no loop \n");
  return;
}

void print(stud_rec *head) {
  while (head != NULL) {
    //printf("Roll no: %d Name: %s\n", head->rno, head->s);
    printf("%d %s ", head->rno, head->s);
    head = head->next;
  }
  printf("\n");
  return;
}

stud_rec* insert(stud_rec *head, int rno, char *s) {
  stud_rec *last, *temp, *old;

  old = head;
  temp = (stud_rec*) malloc(sizeof(stud_rec));
  temp->rno = rno;
  strcpy(temp->s, s);
  temp->next = NULL;

  if (head == NULL) {
    return temp;
  }else {
    while(head->next != NULL) {
      head = head->next;
    }
    head->next = temp;
  }
  return old;
}

