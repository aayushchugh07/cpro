*********Program 55.c ******************************
//double pointers ..
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main() {
  char ch = 'a';
  char *p;
  char **q;
  p = &ch;
  q = &p;
  printf("%c %c \n", *p, **q);

  int n, m, i;
  char tmpS[50];
  printf("enter no. of students: ");
  scanf("%d", &n);

  q = (char **) malloc(sizeof(char *) * n);
  for (i = 0; i < n; i++) {
    scanf("%s", tmpS);
    m = strlen(tmpS);
    m = m + 1;
    q[i] = (char *) malloc(sizeof(char) * m);
    strcpy(q[i], tmpS);
  }

  for (i = 0; i < n; i++) {
   printf("%s\n", q[i]);
  }
}
*********Program 56.c ******************************
//binary tree - insert and histogram count..
//command line arguments....
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
struct tnode {
  char *word;
  int count;
  struct tnode *left;
  struct tnode *right;
};

struct tnode* addtree(struct tnode *p, char *w);
void treeprint(struct tnode *p);

int main(int argc, char **argv) {
  struct tnode *root;
  char tmpW[250];
  char inF[250];
  FILE *fp_in;

  /* printf("enter the file name: ");
  scanf("%s",inF);
  */
  if (argc != 2) {
    printf("Usage ./a.out <filename>\n");
    exit(1);
  } else {
    printf("no. of arg are %d\n", argc);
    printf("%s %s \n", argv[0], argv[1]); 
  }

  fp_in = fopen(argv[1], "r");
  if (fp_in == NULL) {
    printf("file %s  cannot be opened..\n", inF);
    exit(1);
  }

  root = NULL;

  while(fscanf(fp_in, "%s",tmpW) != EOF) {
      root = addtree(root, tmpW);
  }
  treeprint(root);
  fclose(fp_in);
}

struct tnode* addtree(struct tnode *p, char *w) {
  int cmp, m;
  if (p == NULL) {
    p = (struct tnode*) malloc(sizeof(struct tnode));
    //p->word = strdup(w); 
    //strdup is a standard funtion in string.h: Allocates memory for word, copies and returns the pointer.
    m = strlen(w);
    p->word = (char*) malloc(sizeof(char) * m + 1);
    strcpy(p->word, w);
    p->count = 1;
    p->left = p->right = NULL;
  }else { 
    cmp = strcmp(w, p->word);
    if (cmp == 0) {
       p->count++;
    } else if (cmp < 0) {
       p->left = addtree(p->left, w);
    } else {
      p->right = addtree(p->right, w);
    }
  }
 return p;
}

void treeprint(struct tnode *p) {
  if (p != NULL) {
    treeprint(p->left);
    printf("%s %d\n", p->word, p->count);
    treeprint(p->right);
  }
  return;
}

   
